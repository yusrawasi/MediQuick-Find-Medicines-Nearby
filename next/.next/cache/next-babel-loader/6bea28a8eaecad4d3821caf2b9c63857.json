{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/src/app/components/SearchComponents/SelectedMedicine.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n//To render each medicines further types\nimport react from 'react'; // import Link from 'next/link';\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport { ListGroup, Card, Row, Col } from 'react-bootstrap';\n\nvar SelectedMedicine =\n/*#__PURE__*/\nfunction (_react$Component) {\n  _inherits(SelectedMedicine, _react$Component);\n\n  function SelectedMedicine() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectedMedicine);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectedMedicine)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onCLickHandler\", function (e, item, medicine) {\n      console.log(item);\n      console.log(medicine);\n    });\n\n    return _this;\n  }\n\n  _createClass(SelectedMedicine, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var dosageFormList = [];\n      var description;\n      var selectedMedicines = this.props.selectedMedicines; // console.log(selectedMedicines);\n      //Selecting the unique dosage form\n\n      dosageFormList = _toConsumableArray(new _Set(selectedMedicines.map(function (item) {\n        return item.dosage;\n      })));\n      description = dosageFormList.map(function (form, i) {\n        return (//Creating segments for different dosage form\n          __jsx(Accordion.Collapse, {\n            className: \"dosage-segment\",\n            key: i,\n            eventKey: _this2.props.eventKey,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, __jsx(Card, {\n            style: {\n              padding: 20,\n              cursor: \"pointer\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27\n            },\n            __self: this\n          }, __jsx(Card.Title, {\n            className: \"dosage-form\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          }, form), __jsx(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }), selectedMedicines.map(function (medicine, j) {\n            if (medicine.dosage === form) {\n              return __jsx(\"a\", {\n                key: medicine.id,\n                href: \"location?id=\".concat(medicine.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 33\n                },\n                __self: this\n              }, __jsx(Row, {\n                className: \"med-form\",\n                style: {\n                  marginTop: 20\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 34\n                },\n                __self: this\n              }, __jsx(Col, {\n                className: \"left-col\",\n                lg: 6,\n                md: 6,\n                sm: 6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 35\n                },\n                __self: this\n              }, __jsx(Card.Text, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 36\n                },\n                __self: this\n              }, medicine.packaging)), __jsx(Col, {\n                lg: 6,\n                md: 6,\n                sm: 6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 38\n                },\n                __self: this\n              }, medicine.generics.map(function (item, k) {\n                return __jsx(Row, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 41\n                  },\n                  __self: this\n                }, __jsx(Col, {\n                  lg: 12,\n                  md: 12,\n                  sm: 12,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 42\n                  },\n                  __self: this\n                }, __jsx(Card.Text, {\n                  style: {\n                    textTransform: \"capitalize\"\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 43\n                  },\n                  __self: this\n                }, item.drugname, \" : \", item.strength)));\n              }))));\n            }\n          })))\n        );\n      });\n      return __jsx(ListGroup, {\n        className: \"medicine-list-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, description);\n    }\n  }]);\n\n  return SelectedMedicine;\n}(react.Component);\n\nexport default SelectedMedicine;","map":{"version":3,"sources":["/usr/src/app/components/SearchComponents/SelectedMedicine.js"],"names":["react","Accordion","ListGroup","Card","Row","Col","SelectedMedicine","e","item","medicine","console","log","dosageFormList","description","selectedMedicines","props","map","dosage","form","i","eventKey","padding","cursor","j","id","marginTop","packaging","generics","k","textTransform","drugname","strength","Component"],"mappings":"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","sourcesContent":["//To render each medicines further types\r\nimport react from 'react';\r\n// import Link from 'next/link';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { ListGroup, Card, Row, Col } from 'react-bootstrap';\r\n\r\nclass SelectedMedicine extends react.Component {\r\n\r\n    onCLickHandler = (e, item, medicine) => {\r\n        console.log(item);\r\n        console.log(medicine);\r\n    }\r\n\r\n    render(){\r\n        let dosageFormList = [];\r\n        let description;\r\n        const {selectedMedicines} = this.props;\r\n        // console.log(selectedMedicines);\r\n\r\n        //Selecting the unique dosage form\r\n        dosageFormList = [...new Set(selectedMedicines.map(item => item.dosage))];\r\n\r\n        description = dosageFormList.map((form, i) => {\r\n            return (\r\n                //Creating segments for different dosage form\r\n                <Accordion.Collapse className = \"dosage-segment\" key = {i} eventKey={this.props.eventKey}>\r\n                    <Card style = {{padding:20, cursor:\"pointer\"}}>\r\n                        <Card.Title className = \"dosage-form\" >{form}</Card.Title>\r\n                        <hr></hr>\r\n                        {selectedMedicines.map((medicine, j) =>{\r\n                            if(medicine.dosage === form){\r\n                                return (\r\n                                    <a key = {medicine.id} href = {`location?id=${medicine.id}`}>\r\n                                        <Row className = \"med-form\" style = {{marginTop: 20}}>\r\n                                            <Col className = \"left-col\" lg = {6} md = {6} sm={6}>\r\n                                                <Card.Text>{medicine.packaging}</Card.Text>\r\n                                            </Col>\r\n                                            <Col lg = {6} md = {6} sm={6}>\r\n                                                {medicine.generics.map((item, k)=>{\r\n                                                    return (\r\n                                                        <Row>\r\n                                                            <Col lg = {12} md = {12} sm={12}>\r\n                                                                <Card.Text style = {{textTransform: \"capitalize\"}}>\r\n                                                                    {item.drugname} : {item.strength}\r\n                                                                </Card.Text>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    );\r\n                                                })}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </a>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </Card>\r\n                </Accordion.Collapse>\r\n            );\r\n        })\r\n\r\n        return(\r\n            <ListGroup className = \"medicine-list-item\">\r\n                {description}\r\n            </ListGroup>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default SelectedMedicine;"]},"metadata":{},"sourceType":"module"}