{"ast":null,"code":"var _jsxFileName = \"D:\\\\Seventh Semester\\\\FYP\\\\MediQuick-Find-Medicines-Nearby\\\\next\\\\pages\\\\src\\\\components\\\\dashboard\\\\Visitorstats\\\\BasicMap.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Markers, Marker } from 'react-simple-maps';\nimport { scaleLinear } from 'd3-scale';\nimport request from 'axios';\nconst cityScale = scaleLinear().domain([0, 37843000]).range([1, 25]);\n\nclass BasicMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cities: []\n    };\n    this.fetchCities = this.fetchCities.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchCities();\n  }\n\n  fetchCities() {\n    request.get('../../static/world-most-populous-cities.json').then(res => {\n      this.setState({\n        cities: res.data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"wrapperStyles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, __jsx(ComposableMap, {\n      projectionConfig: {\n        scale: 205\n      },\n      width: 980,\n      height: 440,\n      style: {\n        width: '100%',\n        height: '235px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, __jsx(ZoomableGroup, {\n      center: [0, 20],\n      disablePanning: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(Geographies, {\n      geography: \"../../static/world-50m.json\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, (geographies, projection) => geographies.map((geography, i) => geography.id !== 'ATA' && __jsx(Geography, {\n      key: i,\n      geography: geography,\n      projection: projection,\n      style: {\n        default: {\n          fill: '#aaa',\n          stroke: '#fff',\n          strokeWidth: 0.75,\n          outline: 'none'\n        },\n        hover: {\n          fill: '#ECEFF1',\n          stroke: '#607D8B',\n          strokeWidth: 0.75,\n          outline: 'none'\n        },\n        pressed: {\n          fill: '#ECEFF1',\n          stroke: '#607D8B',\n          strokeWidth: 0.75,\n          outline: 'none'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }))), __jsx(Markers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.cities.map((city, i) => __jsx(Marker, {\n      key: i,\n      marker: city,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(\"circle\", {\n      cx: 0,\n      cy: 0,\n      r: cityScale(city.population),\n      fill: \"rgba(255,87,34,0.8)\",\n      strokeWidth: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nexport default BasicMap;","map":{"version":3,"sources":["D:/Seventh Semester/FYP/MediQuick-Find-Medicines-Nearby/next/pages/src/components/dashboard/Visitorstats/BasicMap.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","Markers","Marker","scaleLinear","request","cityScale","domain","range","BasicMap","constructor","state","cities","fetchCities","bind","componentDidMount","get","then","res","setState","data","render","scale","width","height","geographies","projection","map","geography","i","id","default","fill","stroke","strokeWidth","outline","hover","pressed","city","population"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,SAJF,EAKEC,OALF,EAMEC,MANF,QAOO,mBAPP;AAQA,SAAQC,WAAR,QAA0B,UAA1B;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,SAAS,GAAGF,WAAW,GAAIG,MAAf,CAAuB,CAAC,CAAD,EAAI,QAAJ,CAAvB,EAAsCC,KAAtC,CAA6C,CAAC,CAAD,EAAI,EAAJ,CAA7C,CAAlB;;AAEA,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAC/Ba,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAuB,IAAvB,CAAnB;AACD;;AACDC,EAAAA,iBAAiB,GAAI;AACnB,SAAKF,WAAL;AACD;;AACDA,EAAAA,WAAW,GAAI;AACbR,IAAAA,OAAO,CAACW,GAAR,CAAa,8CAAb,EAA6DC,IAA7D,CAAmEC,GAAG,IAAI;AACxE,WAAKC,QAAL,CAAe;AACbP,QAAAA,MAAM,EAAEM,GAAG,CAACE;AADC,OAAf;AAGD,KAJD;AAKD;;AACDC,EAAAA,MAAM,GAAI;AACR,WACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD;AACE,MAAA,gBAAgB,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OADpB;AAEE,MAAA,KAAK,EAAE,GAFT;AAGE,MAAA,MAAM,EAAE,GAHV;AAIE,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,MAAM,EAAE;AAFH,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE,MAAC,aAAD;AAAe,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAvB;AAAgC,MAAA,cAAc,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAa,MAAA,SAAS,EAAC,6BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACC,WAAD,EAAcC,UAAd,KACCD,WAAW,CAACE,GAAZ,CACE,CAACC,SAAD,EAAYC,CAAZ,KACED,SAAS,CAACE,EAAV,KAAiB,KAAjB,IACA,MAAC,SAAD;AACE,MAAA,GAAG,EAAED,CADP;AAEE,MAAA,SAAS,EAAED,SAFb;AAGE,MAAA,UAAU,EAAEF,UAHd;AAIE,MAAA,KAAK,EAAE;AACLK,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,MADC;AAEPC,UAAAA,MAAM,EAAE,MAFD;AAGPC,UAAAA,WAAW,EAAE,IAHN;AAIPC,UAAAA,OAAO,EAAE;AAJF,SADJ;AAOLC,QAAAA,KAAK,EAAE;AACLJ,UAAAA,IAAI,EAAE,SADD;AAELC,UAAAA,MAAM,EAAE,SAFH;AAGLC,UAAAA,WAAW,EAAE,IAHR;AAILC,UAAAA,OAAO,EAAE;AAJJ,SAPF;AAaLE,QAAAA,OAAO,EAAE;AACPL,UAAAA,IAAI,EAAE,SADC;AAEPC,UAAAA,MAAM,EAAE,SAFD;AAGPC,UAAAA,WAAW,EAAE,IAHN;AAIPC,UAAAA,OAAO,EAAE;AAJF;AAbJ,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAFJ,CADF,EAiCE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKxB,KAAL,CAAWC,MAAX,CAAkBe,GAAlB,CAAuB,CAACW,IAAD,EAAOT,CAAP,KACtB,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,MAAM,EAAES,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,EAAE,EAAE,CADN;AAEE,MAAA,EAAE,EAAE,CAFN;AAGE,MAAA,CAAC,EAAEhC,SAAS,CAAEgC,IAAI,CAACC,UAAP,CAHd;AAIE,MAAA,IAAI,EAAC,qBAJP;AAKE,MAAA,WAAW,EAAC,GALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,CADH,CAjCF,CATF,CADF,CADF;AA6DD;;AAhF8B;;AAmFjC,eAAe9B,QAAf","sourcesContent":["import React, {Component} from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from 'react-simple-maps';\nimport {scaleLinear} from 'd3-scale';\nimport request from 'axios';\n\nconst cityScale = scaleLinear ().domain ([0, 37843000]).range ([1, 25]);\n\nclass BasicMap extends Component {\n  constructor () {\n    super ();\n    this.state = {\n      cities: [],\n    };\n    this.fetchCities = this.fetchCities.bind (this);\n  }\n  componentDidMount () {\n    this.fetchCities ();\n  }\n  fetchCities () {\n    request.get ('../../static/world-most-populous-cities.json').then (res => {\n      this.setState ({\n        cities: res.data,\n      });\n    });\n  }\n  render () {\n    return (\n      <div className=\"wrapperStyles\">\n        <ComposableMap\n          projectionConfig={{scale: 205}}\n          width={980}\n          height={440}\n          style={{\n            width: '100%',\n            height: '235px',\n          }}\n        >\n          <ZoomableGroup center={[0, 20]} disablePanning>\n            <Geographies geography=\"../../static/world-50m.json\">\n              {(geographies, projection) =>\n                geographies.map (\n                  (geography, i) =>\n                    geography.id !== 'ATA' &&\n                    <Geography\n                      key={i}\n                      geography={geography}\n                      projection={projection}\n                      style={{\n                        default: {\n                          fill: '#aaa',\n                          stroke: '#fff',\n                          strokeWidth: 0.75,\n                          outline: 'none',\n                        },\n                        hover: {\n                          fill: '#ECEFF1',\n                          stroke: '#607D8B',\n                          strokeWidth: 0.75,\n                          outline: 'none',\n                        },\n                        pressed: {\n                          fill: '#ECEFF1',\n                          stroke: '#607D8B',\n                          strokeWidth: 0.75,\n                          outline: 'none',\n                        },\n                      }}\n                    />\n                )}\n            </Geographies>\n            <Markers>\n              {this.state.cities.map ((city, i) => (\n                <Marker key={i} marker={city}>\n                  <circle\n                    cx={0}\n                    cy={0}\n                    r={cityScale (city.population)}\n                    fill=\"rgba(255,87,34,0.8)\"\n                    strokeWidth=\"1\"\n                  />\n                </Marker>\n              ))}\n            </Markers>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    );\n  }\n}\n\nexport default BasicMap;\n"]},"metadata":{},"sourceType":"module"}