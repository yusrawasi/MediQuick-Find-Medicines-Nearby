{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/src/app/components/LocationComponents/Map.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport pharmacyList from '../../data/pharmacyList';\nimport { Row, Col } from 'react-bootstrap';\nimport Pharmacies from '../LocationComponents/Pharmacies';\nGeocode.setApiKey(\"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getCity\", addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(this, \"getArea\", addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"getState\", addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onPlaceSelected\", place => {\n      console.log(\"place: \", place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    this.state = {\n      address: '',\n      place: '',\n      city: '',\n      area: '',\n      state: '',\n      pharmacyList: pharmacyList,\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: 24.9298,\n        lng: 67.1148\n      }\n    };\n  }\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      // console.log('res:', response);\n      const address = response.results[0].formatted_address,\n            place = response.results[0].address_components[0],\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray); // console.log( 'city', city, area, state );\n\n      this.setState({\n        address: address ? address : '',\n        place: place ? place : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n   *\r\n   * @param nextProps\r\n   * @param nextState\r\n   * @return {boolean}\r\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n   * Get the city and set the city input value to the one selected\r\n   *\r\n   * @param addressArray\r\n   * @return {string}\r\n   */\n\n\n  render() {\n    const {\n      pharmacyList\n    } = this.state; // console.log(this.props);\n\n    const icon = {\n      url: \"https://library.kissclipart.com/20180829/se/kissclipart-pharmacy-shop-vector-transpirant-clipart-pharmacy-0789296e6bec205b.png\",\n      scaledSize: {\n        width: 25,\n        height: 25\n      }\n    };\n    const AsyncMap = withScriptjs(withGoogleMap(props => __jsx(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, __jsx(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        borderRadius: '10px',\n        boxShadow: '0 0',\n        marginTop: '10px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['establishment'],\n      componentRestrictions: {\n        country: \"pk\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), this.state.markerPosition.lat !== null || this.state.markerPosition.lng !== null ? __jsx(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.state.address))) : __jsx(React.Fragment, null), pharmacyList.map(pharmacy => {\n      return __jsx(Marker, {\n        key: pharmacy.id,\n        google: this.props.google,\n        draggable: false,\n        icon: icon,\n        position: {\n          lat: pharmacy.lat,\n          lng: pharmacy.lng\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      });\n    }), this.state.markerPosition.lat !== null || this.state.markerPosition.lng !== null ? __jsx(Marker, {\n      google: this.props.google,\n      draggable: false // icon = {icon}\n      ,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }) : __jsx(React.Fragment, null))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }))), __jsx(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc&libraries=places\",\n        loadingElement: __jsx(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }),\n        containerElement: __jsx(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }),\n        mapElement: __jsx(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }));\n    } else {\n      map = __jsx(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      });\n    } // return( map )\n\n\n    return __jsx(Row, {\n      className: \"second-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, __jsx(Col, {\n      className: \"map\",\n      lg: 8,\n      md: 8,\n      sm: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        margin: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, map)), __jsx(Col, {\n      className: \"pharmacy-list\",\n      lg: 4,\n      md: 4,\n      sm: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, __jsx(Pharmacies, {\n      currentLocation: this.state.markerPosition,\n      pharmacyList: this.state.pharmacyList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/usr/src/app/components/LocationComponents/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","pharmacyList","Row","Col","Pharmacies","setApiKey","enableDebug","Map","Component","constructor","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","place","console","log","address","formatted_address","address_components","getCity","getArea","getState","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","center","componentDidMount","fromLatLng","then","response","results","error","shouldComponentUpdate","nextProps","nextState","render","icon","url","scaledSize","width","height","AsyncMap","google","zoom","paddingLeft","borderRadius","boxShadow","marginTop","onPlaceSelected","country","onInfoWindowClose","padding","margin","map","pharmacy","id","undefined","onChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport pharmacyList from '../../data/pharmacyList';\r\n\r\n\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport Pharmacies from '../LocationComponents/Pharmacies';\r\n\r\nGeocode.setApiKey(\"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\");\r\n\r\nGeocode.enableDebug();\r\n\r\nclass Map extends React.Component{\r\n    constructor( props ){\r\n        super( props );\r\n        this.state = {\r\n            address: '',\r\n            place: '',\r\n            city: '',\r\n            area: '',\r\n            state: '',\r\n            pharmacyList: pharmacyList,\r\n            mapPosition: {\r\n                lat: this.props.center.lat,\r\n                lng: this.props.center.lng\r\n            },\r\n            markerPosition: {\r\n                lat: 24.9298,\r\n                lng: 67.1148\r\n            }\r\n        } \r\n    }\r\n    /**\r\n     * Get the current address from the default map position and set those values in the state\r\n     */\r\n    componentDidMount() {\r\n        Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n            response => {\r\n                // console.log('res:', response);\r\n                \r\n                const address = response.results[0].formatted_address,\r\n                place = response.results[0].address_components[0],\r\n                addressArray =  response.results[0].address_components,\r\n                city = this.getCity( addressArray ),\r\n                area = this.getArea( addressArray ),\r\n                state = this.getState( addressArray );\r\n        \r\n                // console.log( 'city', city, area, state );\r\n            \r\n                this.setState( {\r\n                address: ( address ) ? address : '',\r\n                place: ( place ) ? place : '',\r\n                area: ( area ) ? area : '',\r\n                city: ( city ) ? city : '',\r\n                state: ( state ) ? state : '',\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n     *\r\n     * @param nextProps\r\n     * @param nextState\r\n     * @return {boolean}\r\n     */\r\n    shouldComponentUpdate( nextProps, nextState ){\r\n        if (\r\n            this.state.markerPosition.lat !== this.props.center.lat ||\r\n            this.state.address !== nextState.address ||\r\n            this.state.city !== nextState.city ||\r\n            this.state.area !== nextState.area ||\r\n            this.state.state !== nextState.state\r\n        ){\r\n            return true\r\n        } else if ( this.props.center.lat === nextProps.center.lat ){\r\n            return false\r\n        }\r\n    }    \r\n    /**\r\n     * Get the city and set the city input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\r\n    getCity = ( addressArray ) => {\r\n        let city = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n                city = addressArray[ i ].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the area and set the area input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\r\n    getArea = ( addressArray ) => {\r\n        let area = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0]  ) {\r\n                for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n                    if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n                        area = addressArray[ i ].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the address and set the address input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\r\n    getState = ( addressArray ) => {\r\n        let state = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            for( let i = 0; i < addressArray.length; i++ ) {\r\n                if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n                    state = addressArray[ i ].long_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * And function for city,state and address input\r\n     * @param event\r\n     */\r\n    onChange = ( event ) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n\r\n    /**\r\n     * When the user types an address in the search box\r\n     * @param place\r\n     */\r\n    onPlaceSelected = ( place ) => {\r\n        console.log(\"place: \", place);\r\n        const address = place.formatted_address,\r\n            addressArray =  place.address_components,\r\n            city = this.getCity( addressArray ),\r\n            area = this.getArea( addressArray ),\r\n            state = this.getState( addressArray ),\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n        // Set these values in the state.\r\n        this.setState({\r\n            address: ( address ) ? address : '',\r\n            area: ( area ) ? area : '',\r\n            city: ( city ) ? city : '',\r\n            state: ( state ) ? state : '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    }   \r\n\r\n    render(){\r\n        const {pharmacyList} = this.state;\r\n        \r\n        // console.log(this.props);\r\n\r\n        const icon={\r\n            url: \"https://library.kissclipart.com/20180829/se/kissclipart-pharmacy-shop-vector-transpirant-clipart-pharmacy-0789296e6bec205b.png\",\r\n            scaledSize: { width: 25, height: 25 }\r\n        }\r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(props => (\r\n                <GoogleMap google={this.props.google}\r\n                    defaultZoom={this.props.zoom}\r\n                    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                >\r\n                    {/* For Auto complete Search Box */}\r\n                    <Autocomplete\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '40px',\r\n                            paddingLeft: '16px',\r\n                            borderRadius: '10px',\r\n                            boxShadow: '0 0',\r\n                            marginTop: '10px'\r\n                        }}\r\n                        onPlaceSelected={ this.onPlaceSelected }\r\n                        types={['establishment']}\r\n                        componentRestrictions={{country: \"pk\"}}\r\n                    />\r\n                    {/* InfoWindow on top of marker */}\r\n                    {this.state.markerPosition.lat !== null || this.state.markerPosition.lng !== null? (\r\n                        <InfoWindow\r\n                            onClose={this.onInfoWindowClose}\r\n                            position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n                        >\r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    ): (\r\n                       <></> \r\n                    )}\r\n                   \r\n                    {/*Marker*/}\r\n                    {\r\n                        pharmacyList.map(pharmacy => {\r\n                            return (\r\n                                <Marker\r\n                                    key = {pharmacy.id}\r\n                                    google = {this.props.google}\r\n                                    draggable = {false}\r\n                                    icon = {icon}\r\n                                    position = {{lat: pharmacy.lat, lng: pharmacy.lng}}\r\n                                />\r\n                            )   \r\n                        })\r\n                    }\r\n                    {this.state.markerPosition.lat !== null || this.state.markerPosition.lng !== null? (\r\n                        <Marker google={this.props.google}\r\n                            draggable={false}\r\n                            // icon = {icon}\r\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                        />\r\n                    ): (\r\n                       <></> \r\n                    )}\r\n                </GoogleMap>\r\n            ))\r\n        );\r\n\r\n        let map;\r\n        if( this.props.center.lat !== undefined ) {\r\n            map = <div>\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            {/* <label htmlFor=\"\">Address</label> */}\r\n                            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n                        </div>\r\n                    </div>\r\n                    <AsyncMap\r\n                        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc&libraries=places\"\r\n                        loadingElement={\r\n                            <div style={{ height: `100%` }} />\r\n                        }\r\n                        containerElement={\r\n                            <div style={{ height: this.props.height }} />\r\n                        }\r\n                        mapElement={\r\n                            <div style={{ height: `100%` }} />\r\n                        }\r\n                    />\r\n            </div>\r\n        } else {\r\n            map = <div style={{height: this.props.height}} />\r\n        }\r\n        // return( map )\r\n        return(\r\n            <Row className = \"second-row\">\r\n                <Col className = \"map\" lg = {8} md = {8} sm={12}>\r\n                    <div style = {{margin: 20}}>\r\n                        {map}\r\n                    </div>\r\n                </Col>\r\n                <Col className = \"pharmacy-list\" lg = {4} md = {4} sm={12}>\r\n                    <Pharmacies currentLocation = {this.state.markerPosition} pharmacyList = {this.state.pharmacyList} />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}