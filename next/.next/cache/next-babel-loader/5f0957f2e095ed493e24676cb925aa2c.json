{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/usr/src/app/components/LocationComponents/Pharmacies.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n//Displaying the list of pharmacies on the location page\nimport react from 'react';\nimport { List, Loader } from 'semantic-ui-react';\nimport { GoogleApiWrapper } from 'google-maps-react';\nvar GOOGLE_MAPS_API_KEY = \"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\";\n\nvar Pharmacies =\n/*#__PURE__*/\nfunction (_react$Component) {\n  _inherits(Pharmacies, _react$Component);\n\n  function Pharmacies(props) {\n    var _this;\n\n    _classCallCheck(this, Pharmacies);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pharmacies).call(this, props));\n    _this.state = {\n      loading: true,\n      list: null,\n      currentLocation: _this.props.currentLocation\n    };\n    return _this;\n  }\n\n  _createClass(Pharmacies, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.calculateDistances();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!(this.props.currentLocation == prevProps.currentLocation)) // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n        {\n          this.calculateDistances();\n        }\n    }\n  }, {\n    key: \"calculateDistances\",\n    value: function calculateDistances() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          pharmacyList = _this$props.pharmacyList,\n          currentLocation = _this$props.currentLocation,\n          google = _this$props.google;\n      var latlngs = pharmacyList.map(function (pharmacy) {\n        return {\n          lat: pharmacy.lat,\n          lng: pharmacy.lng\n        };\n      });\n      var destinations = latlngs.map(function (item) {\n        return new google.maps.LatLng(item.lat, item.lng);\n      });\n      console.log(\"destinations \", destinations);\n      var origin = new google.maps.LatLng(currentLocation.lat, currentLocation.lng);\n      var service = new google.maps.DistanceMatrixService();\n      console.log(\"service \", service);\n      service.getDistanceMatrix({\n        origins: [origin],\n        destinations: destinations,\n        travelMode: 'DRIVING'\n      }, function (res) {\n        console.log(\"response \", res);\n        var list = pharmacyList.map(function (pharmacy, index) {\n          return __jsx(List.Item, {\n            key: pharmacy.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, __jsx(List.Icon, {\n            name: \"marker\",\n            size: \"large\",\n            verticalAlign: \"middle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }), __jsx(List.Content, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, __jsx(List.Header, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, pharmacy.name), __jsx(List.Description, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, res.rows[0].elements[index].distance.text), __jsx(List.Description, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, res.rows[0].elements[index].duration.text)));\n        });\n\n        _this2.setState({\n          list: list,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          list = _this$state.list;\n      return __jsx(List, {\n        divided: true,\n        relaxed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Pharmacies\"), loading ? __jsx(Loader, {\n        size: \"massive\",\n        active: true,\n        inline: \"centered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }) : list);\n    }\n  }]);\n\n  return Pharmacies;\n}(react.Component);\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAPS_API_KEY\n})(Pharmacies);","map":{"version":3,"sources":["/usr/src/app/components/LocationComponents/Pharmacies.js"],"names":["react","List","Loader","GoogleApiWrapper","GOOGLE_MAPS_API_KEY","Pharmacies","props","state","loading","list","currentLocation","calculateDistances","prevProps","pharmacyList","google","latlngs","map","pharmacy","lat","lng","destinations","item","maps","LatLng","console","log","origin","service","DistanceMatrixService","getDistanceMatrix","origins","travelMode","res","index","id","name","rows","elements","distance","text","duration","setState","Component","apiKey"],"mappings":"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","sourcesContent":["//Displaying the list of pharmacies on the location page\r\nimport react from 'react';\r\nimport { List, Loader } from 'semantic-ui-react';\r\nimport {GoogleApiWrapper} from 'google-maps-react';\r\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\";\r\n\r\nclass Pharmacies extends react.Component{    \r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            list: null,\r\n            currentLocation: this.props.currentLocation\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.calculateDistances();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(!(this.props.currentLocation == prevProps.currentLocation)) // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\r\n        {\r\n          this.calculateDistances();\r\n        }\r\n    }\r\n\r\n    calculateDistances(){\r\n        const {pharmacyList, currentLocation, google} = this.props;\r\n\r\n        let latlngs = pharmacyList.map((pharmacy)=>{\r\n            return {lat: pharmacy.lat, lng: pharmacy.lng}; \r\n        }); \r\n\r\n        let destinations = latlngs.map((item)=>{\r\n            return new google.maps.LatLng(item.lat, item.lng);\r\n        });\r\n\r\n        console.log(\"destinations \", destinations);\r\n\r\n        let origin = new google.maps.LatLng(currentLocation.lat, currentLocation.lng);\r\n        let service = new google.maps.DistanceMatrixService();\r\n\r\n        console.log(\"service \", service);\r\n\r\n        service.getDistanceMatrix({\r\n            origins: [origin],\r\n            destinations: destinations,\r\n            travelMode: 'DRIVING'\r\n        }, (res) => {\r\n            console.log(\"response \", res);\r\n            let list = pharmacyList.map((pharmacy, index)=>{\r\n                return(\r\n                    <List.Item key = {pharmacy.id}>\r\n                        <List.Icon name='marker' size='large' verticalAlign='middle' />\r\n                        <List.Content>\r\n                            <List.Header as='a'>{pharmacy.name}</List.Header>\r\n                            <List.Description as='a'>{res.rows[0].elements[index].distance.text}</List.Description>\r\n                            <List.Description as='a'>{res.rows[0].elements[index].duration.text}</List.Description>\r\n                        </List.Content>\r\n                    </List.Item>\r\n                )\r\n            });\r\n            this.setState({list: list, loading: false});\r\n        });\r\n    }\r\n    \r\n\r\n    render (){\r\n        const { loading, list} = this.state;\r\n        return(\r\n            <List divided relaxed>\r\n                <h1>Pharmacies</h1>\r\n                {/* {this.state.list} */}\r\n                {loading ? <Loader size='massive' active inline='centered' /> : list}\r\n            </List>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (GOOGLE_MAPS_API_KEY)\r\n})(Pharmacies);\r\n\r\n"]},"metadata":{},"sourceType":"module"}