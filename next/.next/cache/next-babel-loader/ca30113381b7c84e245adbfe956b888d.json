{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/src/app/components/SearchComponents/SearchList.js\";\nvar __jsx = React.createElement;\n//To render the list of medicines(which has been searched) \n//using the brandList array on clicking the submit button\nimport React from 'react';\nimport SelectedMedicine from './SelectedMedicine';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { ListGroup, Card } from 'react-bootstrap';\n\nclass SearchList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onClickHandler\", (event, item) => {\n      // console.log(e,v);\n      //item = item which has been clicked by the user\n      //We need to expand that medicine to show it's dosage type\n      //medicineList contains the list of all the medicines which share the same generic\n      const {\n        medicineList\n      } = this.props; //Fetching all the medicines in medicineList which have the same brand name but have different dosage form\n\n      let results = medicineList.filter(medicine => {\n        return medicine.name === item.name;\n      });\n      this.setState({\n        selectedMedicines: results,\n        isSelected: true\n      });\n    });\n\n    this.state = {\n      selectedMedicines: [],\n      isSelected: false\n    };\n  }\n\n  render() {\n    let list = [];\n    const brandList = this.props.brandList;\n    list = brandList.map((item, i) => {\n      //Mapping each list item in BrandList as a different medicine\n      return (//Passing the item in brandlist to onClickHandler\n        __jsx(Accordion, {\n          className: \"list-item\",\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, __jsx(Card, {\n          style: {\n            borderRadius: \"10px\"\n          },\n          className: \"card-item\",\n          onClick: e => {\n            this.onClickHandler(e, item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, __jsx(Accordion.Toggle, {\n          as: Card.Header,\n          eventKey: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, __jsx(Card.Title, {\n          className: \"med-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, item.name), __jsx(Card.Subtitle, {\n          className: \"company-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, item.manufacturer), this.state.isSelected && __jsx(SelectedMedicine, {\n          selectedMedicines: this.state.selectedMedicines,\n          eventKey: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }))))\n      );\n    });\n    return (//Rendering the list\n      __jsx(React.Fragment, null, __jsx(ListGroup, {\n        className: \"medicine-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, list))\n    );\n  }\n\n}\n\nexport default SearchList;","map":{"version":3,"sources":["/usr/src/app/components/SearchComponents/SearchList.js"],"names":["React","SelectedMedicine","Accordion","ListGroup","Card","SearchList","Component","constructor","props","event","item","medicineList","results","filter","medicine","name","setState","selectedMedicines","isSelected","state","render","list","brandList","map","i","id","borderRadius","e","onClickHandler","Header","manufacturer"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,4CAQD,CAACC,KAAD,EAAOC,IAAP,KAAgB;AAC7B;AACA;AACA;AACA;AACA,YAAM;AAACC,QAAAA;AAAD,UAAiB,KAAKH,KAA5B,CAL6B,CAO7B;;AACA,UAAII,OAAO,GAAGD,YAAY,CAACE,MAAb,CAAoBC,QAAQ,IAAI;AAC1C,eAAOA,QAAQ,CAACC,IAAT,KAAkBL,IAAI,CAACK,IAA9B;AACH,OAFa,CAAd;AAIA,WAAKC,QAAL,CAAc;AAACC,QAAAA,iBAAiB,EAAEL,OAApB;AAA6BM,QAAAA,UAAU,EAAE;AAAzC,OAAd;AACH,KArBiB;;AAEd,SAAKC,KAAL,GAAa;AACTF,MAAAA,iBAAiB,EAAE,EADV;AAETC,MAAAA,UAAU,EAAE;AAFH,KAAb;AAIH;;AAkBDE,EAAAA,MAAM,GAAE;AAEJ,QAAIC,IAAI,GAAG,EAAX;AACA,UAAMC,SAAS,GAAG,KAAKd,KAAL,CAAWc,SAA7B;AACAD,IAAAA,IAAI,GAAGC,SAAS,CAACC,GAAV,CAAc,CAACb,IAAD,EAAQc,CAAR,KAAc;AAC/B;AACA,aACI;AACA,cAAC,SAAD;AAAW,UAAA,SAAS,EAAG,WAAvB;AAAmC,UAAA,GAAG,EAAId,IAAI,CAACe,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,IAAD;AAAM,UAAA,KAAK,EAAG;AAACC,YAAAA,YAAY,EAAE;AAAf,WAAd;AAAsC,UAAA,SAAS,EAAG,WAAlD;AAA8D,UAAA,OAAO,EAAKC,CAAD,IAAM;AAAC,iBAAKC,cAAL,CAAoBD,CAApB,EAAsBjB,IAAtB;AAA4B,WAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,SAAD,CAAW,MAAX;AAAkB,UAAA,EAAE,EAAEN,IAAI,CAACyB,MAA3B;AAAmC,UAAA,QAAQ,EAAEL,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAG,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoCd,IAAI,CAACK,IAAzC,CADJ,EAEI,MAAC,IAAD,CAAM,QAAN;AAAe,UAAA,SAAS,EAAG,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2CL,IAAI,CAACoB,YAAhD,CAFJ,EAGK,KAAKX,KAAL,CAAWD,UAAX,IAAyB,MAAC,gBAAD;AAAkB,UAAA,iBAAiB,EAAI,KAAKC,KAAL,CAAWF,iBAAlD;AAAqE,UAAA,QAAQ,EAAIO,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAH9B,CADJ,CADJ;AAFJ;AAYH,KAdM,CAAP;AAgBA,WACI;AACA,kCACA,MAAC,SAAD;AAAW,QAAA,SAAS,EAAG,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKH,IADL,CADA;AAFJ;AAQH;;AAtDmC;;AAyDxC,eAAehB,UAAf","sourcesContent":["//To render the list of medicines(which has been searched) \r\n//using the brandList array on clicking the submit button\r\n\r\nimport React from 'react';\r\nimport SelectedMedicine from './SelectedMedicine';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { ListGroup, Card } from 'react-bootstrap';\r\n\r\nclass SearchList extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedMedicines: [],\r\n            isSelected: false\r\n        }\r\n    }\r\n\r\n    onClickHandler = (event,item) => {\r\n        // console.log(e,v);\r\n        //item = item which has been clicked by the user\r\n        //We need to expand that medicine to show it's dosage type\r\n        //medicineList contains the list of all the medicines which share the same generic\r\n        const {medicineList} = this.props;\r\n\r\n        //Fetching all the medicines in medicineList which have the same brand name but have different dosage form\r\n        let results = medicineList.filter(medicine => {\r\n            return medicine.name === item.name ;\r\n        });\r\n\r\n        this.setState({selectedMedicines: results, isSelected: true});\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        let list = [];\r\n        const brandList = this.props.brandList;\r\n        list = brandList.map((item , i) => {\r\n            //Mapping each list item in BrandList as a different medicine\r\n            return (     \r\n                //Passing the item in brandlist to onClickHandler\r\n                <Accordion className = \"list-item\" key = {item.id}>\r\n                    <Card style ={{borderRadius: \"10px\"}} className = \"card-item\" onClick = {(e)=> {this.onClickHandler(e,item)}}>\r\n                        <Accordion.Toggle as={Card.Header} eventKey={i}>\r\n                            <Card.Title className = \"med-name\">{item.name}</Card.Title>\r\n                            <Card.Subtitle className = \"company-name\">{item.manufacturer}</Card.Subtitle>\r\n                            {this.state.isSelected && <SelectedMedicine selectedMedicines = {this.state.selectedMedicines} eventKey = {i}/>}\r\n                        </Accordion.Toggle>\r\n                    </Card>\r\n                </Accordion>\r\n            );\r\n        });\r\n\r\n        return (\r\n            //Rendering the list\r\n            <>\r\n            <ListGroup className = \"medicine-list\">\r\n                {list}\r\n            </ListGroup>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchList ;"]},"metadata":{},"sourceType":"module"}