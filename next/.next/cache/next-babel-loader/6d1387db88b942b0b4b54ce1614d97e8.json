{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/src/app/components/SearchComponents/SearchList.js\";\nvar __jsx = React.createElement;\n//To render the list of medicines(which has been searched) \n//using the brandList array on clicking the submit button\nimport React from 'react';\nimport SelectedMedicine from './SelectedMedicine';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { ListGroup, Card } from 'react-bootstrap';\n\nvar SearchList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchList, _React$Component);\n\n  function SearchList(props) {\n    var _this;\n\n    _classCallCheck(this, SearchList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickHandler\", function (event, item) {\n      // console.log(e,v);\n      //item = item which has been clicked by the user\n      //We need to expand that medicine to show it's dosage type\n      //medicineList contains the list of all the medicines which share the same generic\n      var medicineList = _this.props.medicineList; //Fetching all the medicines in medicineList which have the same brand name but have different dosage form\n\n      var results = medicineList.filter(function (medicine) {\n        return medicine.name === item.name;\n      });\n\n      _this.setState({\n        selectedMedicines: results,\n        isSelected: true\n      });\n    });\n\n    _this.state = {\n      selectedMedicines: [],\n      isSelected: false\n    };\n    return _this;\n  }\n\n  _createClass(SearchList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var list = [];\n      var brandList = this.props.brandList;\n      list = brandList.map(function (item, i) {\n        //Mapping each list item in BrandList as a different medicine\n        return (//Passing the item in brandlist to onClickHandler\n          __jsx(Accordion, {\n            className: \"list-item\",\n            key: item.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }, __jsx(Card, {\n            style: {\n              borderRadius: \"10px\"\n            },\n            className: \"card-item\",\n            onClick: function onClick(e) {\n              _this2.onClickHandler(e, item);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, __jsx(Accordion.Toggle, {\n            as: Card.Header,\n            eventKey: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, __jsx(Card.Title, {\n            className: \"med-name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, item.name), __jsx(Card.Subtitle, {\n            className: \"company-name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, item.manufacturer), _this2.state.isSelected && __jsx(SelectedMedicine, {\n            selectedMedicines: _this2.state.selectedMedicines,\n            eventKey: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }))))\n        );\n      });\n      return (//Rendering the list\n        __jsx(React.Fragment, null, __jsx(ListGroup, {\n          className: \"medicine-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, list))\n      );\n    }\n  }]);\n\n  return SearchList;\n}(React.Component);\n\nexport default SearchList;","map":{"version":3,"sources":["/usr/src/app/components/SearchComponents/SearchList.js"],"names":["React","SelectedMedicine","Accordion","ListGroup","Card","SearchList","props","event","item","medicineList","results","filter","medicine","name","setState","selectedMedicines","isSelected","state","list","brandList","map","i","id","borderRadius","e","onClickHandler","Header","manufacturer","Component"],"mappings":";;;;;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;;IAEMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,oFAAMA,KAAN;;AADc,qEAQD,UAACC,KAAD,EAAOC,IAAP,EAAgB;AAC7B;AACA;AACA;AACA;AAJ6B,UAKtBC,YALsB,GAKN,MAAKH,KALC,CAKtBG,YALsB,EAO7B;;AACA,UAAIC,OAAO,GAAGD,YAAY,CAACE,MAAb,CAAoB,UAAAC,QAAQ,EAAI;AAC1C,eAAOA,QAAQ,CAACC,IAAT,KAAkBL,IAAI,CAACK,IAA9B;AACH,OAFa,CAAd;;AAIA,YAAKC,QAAL,CAAc;AAACC,QAAAA,iBAAiB,EAAEL,OAApB;AAA6BM,QAAAA,UAAU,EAAE;AAAzC,OAAd;AACH,KArBiB;;AAEd,UAAKC,KAAL,GAAa;AACTF,MAAAA,iBAAiB,EAAE,EADV;AAETC,MAAAA,UAAU,EAAE;AAFH,KAAb;AAFc;AAMjB;;;;6BAkBO;AAAA;;AAEJ,UAAIE,IAAI,GAAG,EAAX;AACA,UAAMC,SAAS,GAAG,KAAKb,KAAL,CAAWa,SAA7B;AACAD,MAAAA,IAAI,GAAGC,SAAS,CAACC,GAAV,CAAc,UAACZ,IAAD,EAAQa,CAAR,EAAc;AAC/B;AACA,eACI;AACA,gBAAC,SAAD;AAAW,YAAA,SAAS,EAAG,WAAvB;AAAmC,YAAA,GAAG,EAAIb,IAAI,CAACc,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,IAAD;AAAM,YAAA,KAAK,EAAG;AAACC,cAAAA,YAAY,EAAE;AAAf,aAAd;AAAsC,YAAA,SAAS,EAAG,WAAlD;AAA8D,YAAA,OAAO,EAAI,iBAACC,CAAD,EAAM;AAAC,cAAA,MAAI,CAACC,cAAL,CAAoBD,CAApB,EAAsBhB,IAAtB;AAA4B,aAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,SAAD,CAAW,MAAX;AAAkB,YAAA,EAAE,EAAEJ,IAAI,CAACsB,MAA3B;AAAmC,YAAA,QAAQ,EAAEL,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAG,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAoCb,IAAI,CAACK,IAAzC,CADJ,EAEI,MAAC,IAAD,CAAM,QAAN;AAAe,YAAA,SAAS,EAAG,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA2CL,IAAI,CAACmB,YAAhD,CAFJ,EAGK,MAAI,CAACV,KAAL,CAAWD,UAAX,IAAyB,MAAC,gBAAD;AAAkB,YAAA,iBAAiB,EAAI,MAAI,CAACC,KAAL,CAAWF,iBAAlD;AAAqE,YAAA,QAAQ,EAAIM,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAH9B,CADJ,CADJ;AAFJ;AAYH,OAdM,CAAP;AAgBA,aACI;AACA,oCACA,MAAC,SAAD;AAAW,UAAA,SAAS,EAAG,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKH,IADL,CADA;AAFJ;AAQH;;;;EAtDoBlB,KAAK,CAAC4B,S;;AAyD/B,eAAevB,UAAf","sourcesContent":["//To render the list of medicines(which has been searched) \r\n//using the brandList array on clicking the submit button\r\n\r\nimport React from 'react';\r\nimport SelectedMedicine from './SelectedMedicine';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { ListGroup, Card } from 'react-bootstrap';\r\n\r\nclass SearchList extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedMedicines: [],\r\n            isSelected: false\r\n        }\r\n    }\r\n\r\n    onClickHandler = (event,item) => {\r\n        // console.log(e,v);\r\n        //item = item which has been clicked by the user\r\n        //We need to expand that medicine to show it's dosage type\r\n        //medicineList contains the list of all the medicines which share the same generic\r\n        const {medicineList} = this.props;\r\n\r\n        //Fetching all the medicines in medicineList which have the same brand name but have different dosage form\r\n        let results = medicineList.filter(medicine => {\r\n            return medicine.name === item.name ;\r\n        });\r\n\r\n        this.setState({selectedMedicines: results, isSelected: true});\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        let list = [];\r\n        const brandList = this.props.brandList;\r\n        list = brandList.map((item , i) => {\r\n            //Mapping each list item in BrandList as a different medicine\r\n            return (     \r\n                //Passing the item in brandlist to onClickHandler\r\n                <Accordion className = \"list-item\" key = {item.id}>\r\n                    <Card style ={{borderRadius: \"10px\"}} className = \"card-item\" onClick = {(e)=> {this.onClickHandler(e,item)}}>\r\n                        <Accordion.Toggle as={Card.Header} eventKey={i}>\r\n                            <Card.Title className = \"med-name\">{item.name}</Card.Title>\r\n                            <Card.Subtitle className = \"company-name\">{item.manufacturer}</Card.Subtitle>\r\n                            {this.state.isSelected && <SelectedMedicine selectedMedicines = {this.state.selectedMedicines} eventKey = {i}/>}\r\n                        </Accordion.Toggle>\r\n                    </Card>\r\n                </Accordion>\r\n            );\r\n        });\r\n\r\n        return (\r\n            //Rendering the list\r\n            <>\r\n            <ListGroup className = \"medicine-list\">\r\n                {list}\r\n            </ListGroup>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchList ;"]},"metadata":{},"sourceType":"module"}