{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/src/app/components/LocationComponents/Map.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport pharmacyList from '../../data/pharmacyList';\nimport { Row, Col } from 'react-bootstrap';\nimport Pharmacies from '../LocationComponents/Pharmacies';\nGeocode.setApiKey(\"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\");\nGeocode.enableDebug();\n\nvar Map =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Map, _React$Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCity\", function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getArea\", function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getState\", function (addressArray) {\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlaceSelected\", function (place) {\n      console.log(\"place: \", place);\n\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n\n      _this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _this.state = {\n      address: '',\n      place: '',\n      city: '',\n      area: '',\n      state: '',\n      pharmacyList: pharmacyList,\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: 24.9298,\n        lng: 67.1148\n      }\n    };\n    return _this;\n  }\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        // console.log('res:', response);\n        var address = response.results[0].formatted_address,\n            place = response.results[0].address_components[0],\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray); // console.log( 'city', city, area, state );\n\n\n        _this2.setState({\n          address: address ? address : '',\n          place: place ? place : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n\n    /**\r\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n     *\r\n     * @param nextProps\r\n     * @param nextState\r\n     * @return {boolean}\r\n     */\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      }\n    }\n    /**\r\n     * Get the city and set the city input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var pharmacyList = this.state.pharmacyList; // console.log(this.props);\n\n      var icon = {\n        url: \"https://library.kissclipart.com/20180829/se/kissclipart-pharmacy-shop-vector-transpirant-clipart-pharmacy-0789296e6bec205b.png\",\n        scaledSize: {\n          width: 25,\n          height: 25\n        }\n      };\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return __jsx(GoogleMap, {\n          google: _this3.props.google,\n          defaultZoom: _this3.props.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, __jsx(Autocomplete, {\n          style: {\n            width: '100%',\n            height: '40px',\n            paddingLeft: '16px',\n            borderRadius: '10px',\n            boxShadow: '0 0',\n            marginTop: '10px'\n          },\n          onPlaceSelected: _this3.onPlaceSelected,\n          types: ['establishment'],\n          componentRestrictions: {\n            country: \"pk\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }), _this3.state.markerPosition.lat !== null || _this3.state.markerPosition.lng !== null ? __jsx(InfoWindow, {\n          onClose: _this3.onInfoWindowClose,\n          position: {\n            lat: _this3.state.markerPosition.lat + 0.0018,\n            lng: _this3.state.markerPosition.lng\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          style: {\n            padding: 0,\n            margin: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, _this3.state.address))) : __jsx(React.Fragment, null), pharmacyList.map(function (pharmacy) {\n          return __jsx(Marker, {\n            key: pharmacy.id,\n            google: _this3.props.google,\n            draggable: false,\n            icon: icon,\n            position: {\n              lat: pharmacy.lat,\n              lng: pharmacy.lng\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          });\n        }), _this3.state.markerPosition.lat !== null || _this3.state.markerPosition.lng !== null ? __jsx(Marker, {\n          google: _this3.props.google,\n          draggable: false // icon = {icon}\n          ,\n          position: {\n            lat: _this3.state.markerPosition.lat,\n            lng: _this3.state.markerPosition.lng\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }) : __jsx(React.Fragment, null));\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          },\n          __self: this\n        }, __jsx(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.address,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }))), __jsx(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc&libraries=places\",\n          loadingElement: __jsx(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 261\n            },\n            __self: this\n          }),\n          containerElement: __jsx(\"div\", {\n            style: {\n              height: this.props.height\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          }),\n          mapElement: __jsx(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }));\n      } else {\n        map = __jsx(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272\n          },\n          __self: this\n        });\n      } // return( map )\n\n\n      return __jsx(Row, {\n        className: \"second-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, __jsx(Col, {\n        className: \"map\",\n        lg: 8,\n        md: 8,\n        sm: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          margin: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, map)), __jsx(Col, {\n        className: \"pharmacy-list\",\n        lg: 4,\n        md: 4,\n        sm: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, __jsx(Pharmacies, {\n        currentLocation: this.state.markerPosition,\n        pharmacyList: this.state.pharmacyList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Map;\n}(React.Component);\n\nexport default Map;","map":{"version":3,"sources":["/usr/src/app/components/LocationComponents/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","pharmacyList","Row","Col","Pharmacies","setApiKey","enableDebug","Map","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","place","console","log","address","formatted_address","address_components","getCity","getArea","getState","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","center","fromLatLng","then","response","results","error","nextProps","nextState","icon","url","scaledSize","width","height","AsyncMap","google","zoom","paddingLeft","borderRadius","boxShadow","marginTop","onPlaceSelected","country","onInfoWindowClose","padding","margin","map","pharmacy","id","undefined","onChange","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport pharmacyList from '../../data/pharmacyList';\r\n\r\n\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport Pharmacies from '../LocationComponents/Pharmacies';\r\n\r\nGeocode.setApiKey(\"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\");\r\n\r\nGeocode.enableDebug();\r\n\r\nclass Map extends React.Component{\r\n    constructor( props ){\r\n        super( props );\r\n        this.state = {\r\n            address: '',\r\n            place: '',\r\n            city: '',\r\n            area: '',\r\n            state: '',\r\n            pharmacyList: pharmacyList,\r\n            mapPosition: {\r\n                lat: this.props.center.lat,\r\n                lng: this.props.center.lng\r\n            },\r\n            markerPosition: {\r\n                lat: 24.9298,\r\n                lng: 67.1148\r\n            }\r\n        } \r\n    }\r\n    /**\r\n     * Get the current address from the default map position and set those values in the state\r\n     */\r\n    componentDidMount() {\r\n        Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n            response => {\r\n                // console.log('res:', response);\r\n                \r\n                const address = response.results[0].formatted_address,\r\n                place = response.results[0].address_components[0],\r\n                addressArray =  response.results[0].address_components,\r\n                city = this.getCity( addressArray ),\r\n                area = this.getArea( addressArray ),\r\n                state = this.getState( addressArray );\r\n        \r\n                // console.log( 'city', city, area, state );\r\n            \r\n                this.setState( {\r\n                address: ( address ) ? address : '',\r\n                place: ( place ) ? place : '',\r\n                area: ( area ) ? area : '',\r\n                city: ( city ) ? city : '',\r\n                state: ( state ) ? state : '',\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n     *\r\n     * @param nextProps\r\n     * @param nextState\r\n     * @return {boolean}\r\n     */\r\n    shouldComponentUpdate( nextProps, nextState ){\r\n        if (\r\n            this.state.markerPosition.lat !== this.props.center.lat ||\r\n            this.state.address !== nextState.address ||\r\n            this.state.city !== nextState.city ||\r\n            this.state.area !== nextState.area ||\r\n            this.state.state !== nextState.state\r\n        ){\r\n            return true\r\n        } else if ( this.props.center.lat === nextProps.center.lat ){\r\n            return false\r\n        }\r\n    }    \r\n    /**\r\n     * Get the city and set the city input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\r\n    getCity = ( addressArray ) => {\r\n        let city = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n                city = addressArray[ i ].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the area and set the area input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\r\n    getArea = ( addressArray ) => {\r\n        let area = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0]  ) {\r\n                for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n                    if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n                        area = addressArray[ i ].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the address and set the address input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\r\n    getState = ( addressArray ) => {\r\n        let state = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            for( let i = 0; i < addressArray.length; i++ ) {\r\n                if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n                    state = addressArray[ i ].long_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * And function for city,state and address input\r\n     * @param event\r\n     */\r\n    onChange = ( event ) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n\r\n    /**\r\n     * When the user types an address in the search box\r\n     * @param place\r\n     */\r\n    onPlaceSelected = ( place ) => {\r\n        console.log(\"place: \", place);\r\n        const address = place.formatted_address,\r\n            addressArray =  place.address_components,\r\n            city = this.getCity( addressArray ),\r\n            area = this.getArea( addressArray ),\r\n            state = this.getState( addressArray ),\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n        // Set these values in the state.\r\n        this.setState({\r\n            address: ( address ) ? address : '',\r\n            area: ( area ) ? area : '',\r\n            city: ( city ) ? city : '',\r\n            state: ( state ) ? state : '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    }   \r\n\r\n    render(){\r\n        const {pharmacyList} = this.state;\r\n        \r\n        // console.log(this.props);\r\n\r\n        const icon={\r\n            url: \"https://library.kissclipart.com/20180829/se/kissclipart-pharmacy-shop-vector-transpirant-clipart-pharmacy-0789296e6bec205b.png\",\r\n            scaledSize: { width: 25, height: 25 }\r\n        }\r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(props => (\r\n                <GoogleMap google={this.props.google}\r\n                    defaultZoom={this.props.zoom}\r\n                    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                >\r\n                    {/* For Auto complete Search Box */}\r\n                    <Autocomplete\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '40px',\r\n                            paddingLeft: '16px',\r\n                            borderRadius: '10px',\r\n                            boxShadow: '0 0',\r\n                            marginTop: '10px'\r\n                        }}\r\n                        onPlaceSelected={ this.onPlaceSelected }\r\n                        types={['establishment']}\r\n                        componentRestrictions={{country: \"pk\"}}\r\n                    />\r\n                    {/* InfoWindow on top of marker */}\r\n                    {this.state.markerPosition.lat !== null || this.state.markerPosition.lng !== null? (\r\n                        <InfoWindow\r\n                            onClose={this.onInfoWindowClose}\r\n                            position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n                        >\r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    ): (\r\n                       <></> \r\n                    )}\r\n                   \r\n                    {/*Marker*/}\r\n                    {\r\n                        pharmacyList.map(pharmacy => {\r\n                            return (\r\n                                <Marker\r\n                                    key = {pharmacy.id}\r\n                                    google = {this.props.google}\r\n                                    draggable = {false}\r\n                                    icon = {icon}\r\n                                    position = {{lat: pharmacy.lat, lng: pharmacy.lng}}\r\n                                />\r\n                            )   \r\n                        })\r\n                    }\r\n                    {this.state.markerPosition.lat !== null || this.state.markerPosition.lng !== null? (\r\n                        <Marker google={this.props.google}\r\n                            draggable={false}\r\n                            // icon = {icon}\r\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                        />\r\n                    ): (\r\n                       <></> \r\n                    )}\r\n                </GoogleMap>\r\n            ))\r\n        );\r\n\r\n        let map;\r\n        if( this.props.center.lat !== undefined ) {\r\n            map = <div>\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            {/* <label htmlFor=\"\">Address</label> */}\r\n                            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n                        </div>\r\n                    </div>\r\n                    <AsyncMap\r\n                        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc&libraries=places\"\r\n                        loadingElement={\r\n                            <div style={{ height: `100%` }} />\r\n                        }\r\n                        containerElement={\r\n                            <div style={{ height: this.props.height }} />\r\n                        }\r\n                        mapElement={\r\n                            <div style={{ height: `100%` }} />\r\n                        }\r\n                    />\r\n            </div>\r\n        } else {\r\n            map = <div style={{height: this.props.height}} />\r\n        }\r\n        // return( map )\r\n        return(\r\n            <Row className = \"second-row\">\r\n                <Col className = \"map\" lg = {8} md = {8} sm={12}>\r\n                    <div style = {{margin: 20}}>\r\n                        {map}\r\n                    </div>\r\n                </Col>\r\n                <Col className = \"pharmacy-list\" lg = {4} md = {4} sm={12}>\r\n                    <Pharmacies currentLocation = {this.state.markerPosition} pharmacyList = {this.state.pharmacyList} />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}