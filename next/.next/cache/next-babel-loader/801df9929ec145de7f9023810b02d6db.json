{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/components/LocationComponents/Pharmacies.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n//Displaying the list of pharmacies on the location page\nimport react from 'react';\nimport { List, Loader } from 'semantic-ui-react';\nimport { GoogleApiWrapper } from 'google-maps-react';\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\";\n\nclass Pharmacies extends react.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      list: null,\n      currentLocation: this.props.currentLocation\n    };\n  }\n\n  componentDidMount() {\n    this.calculateDistances();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!(this.props.currentLocation == prevProps.currentLocation)) // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n      {\n        this.calculateDistances();\n      }\n  }\n\n  calculateDistances() {\n    const {\n      pharmacyList,\n      currentLocation,\n      google\n    } = this.props;\n    let latlngs = pharmacyList.map(pharmacy => {\n      return {\n        lat: pharmacy.lat,\n        lng: pharmacy.lng\n      };\n    });\n    let destinations = latlngs.map(item => {\n      return new google.maps.LatLng(item.lat, item.lng);\n    });\n    console.log(\"destinations \", destinations);\n    let origin = new google.maps.LatLng(currentLocation.lat, currentLocation.lng);\n    let service = new google.maps.DistanceMatrixService();\n    console.log(\"service \", service);\n    service.getDistanceMatrix({\n      origins: [origin],\n      destinations: destinations,\n      travelMode: 'DRIVING'\n    }, res => {\n      console.log(\"response \", res);\n      let list = pharmacyList.map((pharmacy, index) => {\n        return __jsx(List.Item, {\n          key: pharmacy.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, __jsx(List.Icon, {\n          name: \"marker\",\n          size: \"large\",\n          verticalAlign: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), __jsx(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, __jsx(List.Header, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, pharmacy.name), __jsx(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, res.rows[0].elements[index].distance.text), __jsx(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, res.rows[0].elements[index].duration.text)));\n      });\n      this.setState({\n        list: list,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      list\n    } = this.state;\n    return __jsx(List, {\n      divided: true,\n      relaxed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Pharmacies\"), loading ? __jsx(Loader, {\n      size: \"massive\",\n      active: true,\n      inline: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }) : list);\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAPS_API_KEY\n})(Pharmacies);","map":{"version":3,"sources":["/usr/src/app/components/LocationComponents/Pharmacies.js"],"names":["react","List","Loader","GoogleApiWrapper","GOOGLE_MAPS_API_KEY","Pharmacies","Component","constructor","props","state","loading","list","currentLocation","componentDidMount","calculateDistances","componentDidUpdate","prevProps","pharmacyList","google","latlngs","map","pharmacy","lat","lng","destinations","item","maps","LatLng","console","log","origin","service","DistanceMatrixService","getDistanceMatrix","origins","travelMode","res","index","id","name","rows","elements","distance","text","duration","setState","render","apiKey"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AACA,MAAMC,mBAAmB,GAAG,yCAA5B;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,IAAI,EAAE,IAFG;AAGTC,MAAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWI;AAHnB,KAAb;AAKH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,kBAAL;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAG,EAAE,KAAKR,KAAL,CAAWI,eAAX,IAA8BI,SAAS,CAACJ,eAA1C,CAAH,EAA+D;AAC/D;AACE,aAAKE,kBAAL;AACD;AACJ;;AAEDA,EAAAA,kBAAkB,GAAE;AAChB,UAAM;AAACG,MAAAA,YAAD;AAAeL,MAAAA,eAAf;AAAgCM,MAAAA;AAAhC,QAA0C,KAAKV,KAArD;AAEA,QAAIW,OAAO,GAAGF,YAAY,CAACG,GAAb,CAAkBC,QAAD,IAAY;AACvC,aAAO;AAACC,QAAAA,GAAG,EAAED,QAAQ,CAACC,GAAf;AAAoBC,QAAAA,GAAG,EAAEF,QAAQ,CAACE;AAAlC,OAAP;AACH,KAFa,CAAd;AAIA,QAAIC,YAAY,GAAGL,OAAO,CAACC,GAAR,CAAaK,IAAD,IAAQ;AACnC,aAAO,IAAIP,MAAM,CAACQ,IAAP,CAAYC,MAAhB,CAAuBF,IAAI,CAACH,GAA5B,EAAiCG,IAAI,CAACF,GAAtC,CAAP;AACH,KAFkB,CAAnB;AAIAK,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,YAA7B;AAEA,QAAIM,MAAM,GAAG,IAAIZ,MAAM,CAACQ,IAAP,CAAYC,MAAhB,CAAuBf,eAAe,CAACU,GAAvC,EAA4CV,eAAe,CAACW,GAA5D,CAAb;AACA,QAAIQ,OAAO,GAAG,IAAIb,MAAM,CAACQ,IAAP,CAAYM,qBAAhB,EAAd;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,OAAxB;AAEAA,IAAAA,OAAO,CAACE,iBAAR,CAA0B;AACtBC,MAAAA,OAAO,EAAE,CAACJ,MAAD,CADa;AAEtBN,MAAAA,YAAY,EAAEA,YAFQ;AAGtBW,MAAAA,UAAU,EAAE;AAHU,KAA1B,EAIIC,GAAD,IAAS;AACRR,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBO,GAAzB;AACA,UAAIzB,IAAI,GAAGM,YAAY,CAACG,GAAb,CAAiB,CAACC,QAAD,EAAWgB,KAAX,KAAmB;AAC3C,eACI,MAAC,IAAD,CAAM,IAAN;AAAW,UAAA,GAAG,EAAIhB,QAAQ,CAACiB,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,IAAD,CAAM,IAAN;AAAW,UAAA,IAAI,EAAC,QAAhB;AAAyB,UAAA,IAAI,EAAC,OAA9B;AAAsC,UAAA,aAAa,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,MAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,IAAD,CAAM,MAAN;AAAa,UAAA,EAAE,EAAC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqBjB,QAAQ,CAACkB,IAA9B,CADJ,EAEI,MAAC,IAAD,CAAM,WAAN;AAAkB,UAAA,EAAE,EAAC,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BH,GAAG,CAACI,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqBJ,KAArB,EAA4BK,QAA5B,CAAqCC,IAA/D,CAFJ,EAGI,MAAC,IAAD,CAAM,WAAN;AAAkB,UAAA,EAAE,EAAC,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BP,GAAG,CAACI,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqBJ,KAArB,EAA4BO,QAA5B,CAAqCD,IAA/D,CAHJ,CAFJ,CADJ;AAUH,OAXU,CAAX;AAYA,WAAKE,QAAL,CAAc;AAAClC,QAAAA,IAAI,EAAEA,IAAP;AAAaD,QAAAA,OAAO,EAAE;AAAtB,OAAd;AACH,KAnBD;AAoBH;;AAGDoC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEpC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAmB,KAAKF,KAA9B;AACA,WACI,MAAC,IAAD;AAAM,MAAA,OAAO,MAAb;AAAc,MAAA,OAAO,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGKC,OAAO,GAAG,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,MAAM,MAA7B;AAA8B,MAAA,MAAM,EAAC,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAwDC,IAHpE,CADJ;AAOH;;AAxEmC;;AA2ExC,eAAeR,gBAAgB,CAAC;AAC5B4C,EAAAA,MAAM,EAAG3C;AADmB,CAAD,CAAhB,CAEZC,UAFY,CAAf","sourcesContent":["//Displaying the list of pharmacies on the location page\r\nimport react from 'react';\r\nimport { List, Loader } from 'semantic-ui-react';\r\nimport {GoogleApiWrapper} from 'google-maps-react';\r\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyDUtGLl70yxAlVHl08pOvTeTRyF5_vrglc\";\r\n\r\nclass Pharmacies extends react.Component{    \r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            list: null,\r\n            currentLocation: this.props.currentLocation\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.calculateDistances();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(!(this.props.currentLocation == prevProps.currentLocation)) // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\r\n        {\r\n          this.calculateDistances();\r\n        }\r\n    }\r\n\r\n    calculateDistances(){\r\n        const {pharmacyList, currentLocation, google} = this.props;\r\n\r\n        let latlngs = pharmacyList.map((pharmacy)=>{\r\n            return {lat: pharmacy.lat, lng: pharmacy.lng}; \r\n        }); \r\n\r\n        let destinations = latlngs.map((item)=>{\r\n            return new google.maps.LatLng(item.lat, item.lng);\r\n        });\r\n\r\n        console.log(\"destinations \", destinations);\r\n\r\n        let origin = new google.maps.LatLng(currentLocation.lat, currentLocation.lng);\r\n        let service = new google.maps.DistanceMatrixService();\r\n\r\n        console.log(\"service \", service);\r\n\r\n        service.getDistanceMatrix({\r\n            origins: [origin],\r\n            destinations: destinations,\r\n            travelMode: 'DRIVING'\r\n        }, (res) => {\r\n            console.log(\"response \", res);\r\n            let list = pharmacyList.map((pharmacy, index)=>{\r\n                return(\r\n                    <List.Item key = {pharmacy.id}>\r\n                        <List.Icon name='marker' size='large' verticalAlign='middle' />\r\n                        <List.Content>\r\n                            <List.Header as='a'>{pharmacy.name}</List.Header>\r\n                            <List.Description as='a'>{res.rows[0].elements[index].distance.text}</List.Description>\r\n                            <List.Description as='a'>{res.rows[0].elements[index].duration.text}</List.Description>\r\n                        </List.Content>\r\n                    </List.Item>\r\n                )\r\n            });\r\n            this.setState({list: list, loading: false});\r\n        });\r\n    }\r\n    \r\n\r\n    render (){\r\n        const { loading, list} = this.state;\r\n        return(\r\n            <List divided relaxed>\r\n                <h1>Pharmacies</h1>\r\n                {/* {this.state.list} */}\r\n                {loading ? <Loader size='massive' active inline='centered' /> : list}\r\n            </List>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (GOOGLE_MAPS_API_KEY)\r\n})(Pharmacies);\r\n\r\n"]},"metadata":{},"sourceType":"module"}