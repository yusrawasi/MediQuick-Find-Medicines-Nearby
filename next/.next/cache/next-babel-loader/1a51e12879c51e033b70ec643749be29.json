{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/src/app/components/SearchComponents/SelectedMedicine.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n//To render each medicines further types\nimport react from 'react'; // import Link from 'next/link';\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport { ListGroup, Card, Row, Col } from 'react-bootstrap';\n\nclass SelectedMedicine extends react.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onCLickHandler\", (e, item, medicine) => {\n      console.log(item);\n      console.log(medicine);\n    });\n  }\n\n  render() {\n    let dosageFormList = [];\n    let description;\n    const {\n      selectedMedicines\n    } = this.props; // console.log(selectedMedicines);\n    //Selecting the unique dosage form\n\n    dosageFormList = [...new _Set(selectedMedicines.map(item => item.dosage))];\n    description = dosageFormList.map((form, i) => {\n      return (//Creating segments for different dosage form\n        __jsx(Accordion.Collapse, {\n          className: \"dosage-segment\",\n          key: i,\n          eventKey: this.props.eventKey,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, __jsx(Card, {\n          style: {\n            padding: 20,\n            cursor: \"pointer\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, __jsx(Card.Title, {\n          className: \"dosage-form\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, form), __jsx(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }), selectedMedicines.map((medicine, j) => {\n          if (medicine.dosage === form) {\n            return __jsx(\"a\", {\n              key: medicine.id,\n              href: `location?id=${medicine.id}`,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 33\n              },\n              __self: this\n            }, __jsx(Row, {\n              className: \"med-form\",\n              style: {\n                marginTop: 20\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34\n              },\n              __self: this\n            }, __jsx(Col, {\n              className: \"left-col\",\n              lg: 6,\n              md: 6,\n              sm: 6,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 35\n              },\n              __self: this\n            }, __jsx(Card.Text, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36\n              },\n              __self: this\n            }, medicine.packaging)), __jsx(Col, {\n              lg: 6,\n              md: 6,\n              sm: 6,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            }, medicine.generics.map((item, k) => {\n              return __jsx(Row, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 41\n                },\n                __self: this\n              }, __jsx(Col, {\n                lg: 12,\n                md: 12,\n                sm: 12,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 42\n                },\n                __self: this\n              }, __jsx(Card.Text, {\n                style: {\n                  textTransform: \"capitalize\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 43\n                },\n                __self: this\n              }, item.drugname, \" : \", item.strength)));\n            }))));\n          }\n        })))\n      );\n    });\n    return __jsx(ListGroup, {\n      className: \"medicine-list-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, description);\n  }\n\n}\n\nexport default SelectedMedicine;","map":{"version":3,"sources":["/usr/src/app/components/SearchComponents/SelectedMedicine.js"],"names":["react","Accordion","ListGroup","Card","Row","Col","SelectedMedicine","Component","e","item","medicine","console","log","render","dosageFormList","description","selectedMedicines","props","map","dosage","form","i","eventKey","padding","cursor","j","id","marginTop","packaging","generics","k","textTransform","drugname","strength"],"mappings":"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","sourcesContent":["//To render each medicines further types\r\nimport react from 'react';\r\n// import Link from 'next/link';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { ListGroup, Card, Row, Col } from 'react-bootstrap';\r\n\r\nclass SelectedMedicine extends react.Component {\r\n\r\n    onCLickHandler = (e, item, medicine) => {\r\n        console.log(item);\r\n        console.log(medicine);\r\n    }\r\n\r\n    render(){\r\n        let dosageFormList = [];\r\n        let description;\r\n        const {selectedMedicines} = this.props;\r\n        // console.log(selectedMedicines);\r\n\r\n        //Selecting the unique dosage form\r\n        dosageFormList = [...new Set(selectedMedicines.map(item => item.dosage))];\r\n\r\n        description = dosageFormList.map((form, i) => {\r\n            return (\r\n                //Creating segments for different dosage form\r\n                <Accordion.Collapse className = \"dosage-segment\" key = {i} eventKey={this.props.eventKey}>\r\n                    <Card style = {{padding:20, cursor:\"pointer\"}}>\r\n                        <Card.Title className = \"dosage-form\" >{form}</Card.Title>\r\n                        <hr></hr>\r\n                        {selectedMedicines.map((medicine, j) =>{\r\n                            if(medicine.dosage === form){\r\n                                return (\r\n                                    <a key = {medicine.id} href = {`location?id=${medicine.id}`}>\r\n                                        <Row className = \"med-form\" style = {{marginTop: 20}}>\r\n                                            <Col className = \"left-col\" lg = {6} md = {6} sm={6}>\r\n                                                <Card.Text>{medicine.packaging}</Card.Text>\r\n                                            </Col>\r\n                                            <Col lg = {6} md = {6} sm={6}>\r\n                                                {medicine.generics.map((item, k)=>{\r\n                                                    return (\r\n                                                        <Row>\r\n                                                            <Col lg = {12} md = {12} sm={12}>\r\n                                                                <Card.Text style = {{textTransform: \"capitalize\"}}>\r\n                                                                    {item.drugname} : {item.strength}\r\n                                                                </Card.Text>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    );\r\n                                                })}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </a>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </Card>\r\n                </Accordion.Collapse>\r\n            );\r\n        })\r\n\r\n        return(\r\n            <ListGroup className = \"medicine-list-item\">\r\n                {description}\r\n            </ListGroup>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default SelectedMedicine;"]},"metadata":{},"sourceType":"module"}